{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SACMC,EAAOC,SAASC,cAAc,SAC9BC,EAAO,CACXC,MAAOJ,EAAKE,cAAc,uBAC1BG,KAAML,EAAKE,cAAc,sBACzBI,OAAQN,EAAKE,cAAc,wBAC3BK,IAAKP,EAAKE,cAAc,WAU1B,SAASM,EAAcC,EAAUL,GAC/B,OAAO,IAAIM,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,GACFF,EAAQ,uBAAwCM,OAAfR,EAAS,QAAYQ,OAANb,EAAM,OACtDc,EAAApB,GAASqB,OAAOC,QAAQ,uBAAwCH,OAAfR,EAAS,QAAYQ,OAANb,EAAM,SAEtEQ,EAAO,sBAAuCK,OAAfR,EAAS,QAAYQ,OAANb,EAAM,OACpDc,EAAApB,GAASqB,OAAOE,QAAQ,sBAAuCJ,OAAfR,EAAS,QAAYQ,OAANb,EAAM,O,GAEtEA,E,IAnBPJ,EAAKsB,iBAAiB,UACtB,SAAuBC,GACrBA,EAAMC,iBACN,IAAMC,EAAWC,OAAOvB,EAAKG,OAAOqB,OAC9BC,EAAaF,OAAOvB,EAAKC,MAAMuB,OAC/BE,EAAYH,OAAOvB,EAAKE,KAAKsB,QAiBrC,SAA0BF,EAAUG,EAAYC,GAE9C,IADA,IAAMC,EAAW,GACRC,EAAI,EAAGA,EAAIN,EAAUM,IAAK,CACjC,IAEMC,EAAUxB,EADCuB,EAAI,EADAH,EAAaG,EAAIF,GAGtCC,EAASG,KAAKD,E,CAEhBtB,QAAQwB,IAAIJ,GACTK,MAAK,SAAAC,G,IACCC,GAAY,EAAZC,GAAY,EAAZC,OAAYC,E,IAAjB,QAAKC,EAAAC,EAAgBN,EAAOO,OAAAC,cAAvBP,GAAAI,EAAAC,EAAYG,QAAAC,MAAZT,GAAY,GAAZ,IAAMU,EAANN,EAAYd,MACfqB,QAAQC,IAAIF,E,WADTT,GAAY,EAAZC,EAAYW,C,aAAZb,GAAY,MAAZK,EAAYS,QAAZT,EAAYS,Q,YAAZb,E,MAAAC,C,MAINa,OAAM,SAAAC,GACLL,QAAQK,MAAMA,E,IA/BlBC,CAAiB7B,EAAUG,EAAYC,E","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from \"notiflix\";\nconst form = document.querySelector('.form');\nconst elem = {\n  delay: form.querySelector('input[name=\"delay\"]'),\n  step: form.querySelector('input[name=\"step\"]'),\n  amount: form.querySelector('input[name=\"amount\"]'),\n  btn: form.querySelector('button')\n}\nform.addEventListener('submit', handlerSubmit);\nfunction handlerSubmit(event) {\n  event.preventDefault(); // +\n  const inAmount = Number(elem.amount.value);\n  const inputDelay = Number(elem.delay.value);\n  const inputStep = Number(elem.step.value);\n  generatePromises(inAmount, inputDelay, inputStep);\n}\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      } else {\n        reject(`❌ Rejected promise ${position} in ${delay}ms`);\n        Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      }\n    }, delay);\n  });\n}\nfunction generatePromises(inAmount, inputDelay, inputStep) {\n  const promises = [];\n  for (let i = 0; i < inAmount; i++) {\n    const currentDelay = inputDelay + i * inputStep;\n    const position = i + 1;\n    const promise = createPromise(position, currentDelay);\n    promises.push(promise);\n  }\n  Promise.all(promises)\n    .then(results => {\n      for (const result of results) {\n        console.log(result);\n      }\n    })\n    .catch(error => {\n      console.error(error);\n    });\n}\n\n\n\n\n\n\n// import Notiflix from \"notiflix\";\n\n// const form = document.querySelector('.form');\n// const elem = {\n//   delay: form.querySelector('input[name=\"delay\"]'),\n//   step: form.querySelector('input[name=\"step\"]'),\n//   amount: form.querySelector('input[name=\"amount\"]'),\n//   btn: form.querySelector('button')\n// }\n\n// elem.btn.addEventListener('click', handlerClick);\n\n// function handlerClick() {\n//   const inAmount = Number(elem.amount.value);\n//   const inputDelay = Number(elem.delay.value);\n//   const inputStep = Number(elem.step.value);\n//   // generatePromises(inAmount, inputDelay, inputStep)\n//   console.log(createPromise(0, inputDelay))\n// }\n\n// function createPromise(position, delay) {\n//   return new Promise((resolve, reject) => {\n//     const shouldResolve = Math.random() > 0.3;\n//     setTimeout(() => {\n//       if (shouldResolve) {\n//         resolve(`Promise ${position} resolved after ${delay} ms`);\n//         Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//         console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//       } else {\n//         reject(`Promise ${position} rejected after ${delay} ms`);\n//         Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n//         console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//       }\n//     }, delay);\n//   });\n// }\n\n// function generatePromises(inAmount, inputDelay, inputStep) {\n//   const promises = [];\n//   for (let i = 0; i < inAmount; i++) {\n//     const currentDelay = inputDelay + i * inputStep;\n//     const position = i + 1;\n//     const promise = new Promise(resolve => {\n//       setTimeout(() => {\n//         resolve(createPromise(position, currentDelay));\n//       }, currentDelay);\n//     });\n//     promises.push(promise);\n//   }\n// }\n\n\n\n\n\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$elem","delay","step","amount","btn","$ce04d3a99e08e73b$var$createPromise","position","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","concat","$parcel$interopDefault","Notify","success","failure","addEventListener","event","preventDefault","inAmount","Number","value","inputDelay","inputStep","promises","i","promise","push","all","then","results","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","result","console","log","err","return","catch","error","$ce04d3a99e08e73b$var$generatePromises"],"version":3,"file":"03-promises.44cc406f.js.map"}