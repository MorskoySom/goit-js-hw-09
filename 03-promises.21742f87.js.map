{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SACA,MAAMC,EAAOC,SAASC,cAAc,SAC9BC,EAAO,CACXC,MAAOJ,EAAKE,cAAc,uBAC1BG,KAAML,EAAKE,cAAc,sBACzBI,OAAQN,EAAKE,cAAc,wBAC3BK,IAAKP,EAAKE,cAAc,WAU1B,SAASM,EAAcC,EAAUL,GAC/B,OAAO,IAAIM,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,GACFF,EAAQ,uBAAqBF,QAAiBL,OAC9Ca,EAAAnB,GAASoB,OAAOC,QAAQ,uBAAqBV,QAAiBL,SAE9DQ,EAAO,sBAAoBH,QAAiBL,OAC5Ca,EAAAnB,GAASoB,OAAOE,QAAQ,sBAAoBX,QAAiBL,O,GAE9DA,EAAM,G,CAnBbJ,EAAKqB,iBAAiB,UACtB,SAAuBC,GACrBA,EAAMC,iBACN,MAAMC,EAAWC,OAAOtB,EAAKG,OAAOoB,OAC9BC,EAAaF,OAAOtB,EAAKC,MAAMsB,OAC/BE,EAAYH,OAAOtB,EAAKE,KAAKqB,QAiBrC,SAA0BF,EAAUG,EAAYC,GAC9C,MAAMC,EAAW,GACjB,IAAK,IAAIC,EAAI,EAAGA,EAAIN,EAAUM,IAAK,CACjC,MAEMC,EAAUvB,EADCsB,EAAI,EADAH,EAAaG,EAAIF,GAGtCC,EAASG,KAAKD,E,CAEhBrB,QAAQuB,IAAIJ,GACTK,MAAKC,IACJ,IAAK,MAAMC,KAAUD,EACnBE,QAAQC,IAAIF,EAAO,IAGtBG,OAAMC,IACLH,QAAQG,MAAMA,EAAM,G,CA/BxBC,CAAiBjB,EAAUG,EAAYC,E","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from \"notiflix\";\nconst form = document.querySelector('.form');\nconst elem = {\n  delay: form.querySelector('input[name=\"delay\"]'),\n  step: form.querySelector('input[name=\"step\"]'),\n  amount: form.querySelector('input[name=\"amount\"]'),\n  btn: form.querySelector('button')\n}\nform.addEventListener('submit', handlerSubmit);\nfunction handlerSubmit(event) {\n  event.preventDefault(); // +\n  const inAmount = Number(elem.amount.value);\n  const inputDelay = Number(elem.delay.value);\n  const inputStep = Number(elem.step.value);\n  generatePromises(inAmount, inputDelay, inputStep);\n}\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      } else {\n        reject(`❌ Rejected promise ${position} in ${delay}ms`);\n        Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      }\n    }, delay);\n  });\n}\nfunction generatePromises(inAmount, inputDelay, inputStep) {\n  const promises = [];\n  for (let i = 0; i < inAmount; i++) {\n    const currentDelay = inputDelay + i * inputStep;\n    const position = i + 1;\n    const promise = createPromise(position, currentDelay);\n    promises.push(promise);\n  }\n  Promise.all(promises)\n    .then(results => {\n      for (const result of results) {\n        console.log(result);\n      }\n    })\n    .catch(error => {\n      console.error(error);\n    });\n}\n\n\n\n\n\n\n// import Notiflix from \"notiflix\";\n\n// const form = document.querySelector('.form');\n// const elem = {\n//   delay: form.querySelector('input[name=\"delay\"]'),\n//   step: form.querySelector('input[name=\"step\"]'),\n//   amount: form.querySelector('input[name=\"amount\"]'),\n//   btn: form.querySelector('button')\n// }\n\n// elem.btn.addEventListener('click', handlerClick);\n\n// function handlerClick() {\n//   const inAmount = Number(elem.amount.value);\n//   const inputDelay = Number(elem.delay.value);\n//   const inputStep = Number(elem.step.value);\n//   // generatePromises(inAmount, inputDelay, inputStep)\n//   console.log(createPromise(0, inputDelay))\n// }\n\n// function createPromise(position, delay) {\n//   return new Promise((resolve, reject) => {\n//     const shouldResolve = Math.random() > 0.3;\n//     setTimeout(() => {\n//       if (shouldResolve) {\n//         resolve(`Promise ${position} resolved after ${delay} ms`);\n//         Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//         console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//       } else {\n//         reject(`Promise ${position} rejected after ${delay} ms`);\n//         Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n//         console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//       }\n//     }, delay);\n//   });\n// }\n\n// function generatePromises(inAmount, inputDelay, inputStep) {\n//   const promises = [];\n//   for (let i = 0; i < inAmount; i++) {\n//     const currentDelay = inputDelay + i * inputStep;\n//     const position = i + 1;\n//     const promise = new Promise(resolve => {\n//       setTimeout(() => {\n//         resolve(createPromise(position, currentDelay));\n//       }, currentDelay);\n//     });\n//     promises.push(promise);\n//   }\n// }\n\n\n\n\n\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$form","document","querySelector","$47d4ff9957288465$var$elem","delay","step","amount","btn","$47d4ff9957288465$var$createPromise","position","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","$parcel$interopDefault","Notify","success","failure","addEventListener","event","preventDefault","inAmount","Number","value","inputDelay","inputStep","promises","i","promise","push","all","then","results","result","console","log","catch","error","$47d4ff9957288465$var$generatePromises"],"version":3,"file":"03-promises.21742f87.js.map"}