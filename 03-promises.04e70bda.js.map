{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAOC,SAASC,cAAc,SAC9BC,EAAO,CACXC,MAAOJ,EAAKE,cAAc,uBAC1BG,KAAML,EAAKE,cAAc,sBACzBI,OAAQN,EAAKE,cAAc,wBAC3BK,IAAKP,EAAKE,cAAc,WAa1B,SAASM,EAAcC,EAAUL,GAC/B,OAAO,IAAIM,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,GACFF,EAAQ,WAAsCM,OAA3BR,EAAS,oBAAwBQ,OAANb,EAAM,QACpDc,EAAApB,GAASqB,OAAOC,QAAQ,uBAAwCH,OAAfR,EAAS,QAAYQ,OAANb,EAAM,OACpEiB,QAAMC,IAAI,uBAAwCL,OAAfR,EAAS,QAAYQ,OAANb,EAAM,SAE1DQ,EAAO,WAAsCK,OAA3BR,EAAS,oBAAwBQ,OAANb,EAAM,QACnDc,EAAApB,GAASqB,OAAOI,QAAQ,sBAAuCN,OAAfR,EAAS,QAAYQ,OAANb,EAAM,OACnEiB,QAAMC,IAAI,sBAAqCL,OAAfR,EAAS,QAAYQ,OAANb,EAAM,O,GAExDA,E,IAvBPD,EAAKI,IAAIiB,iBAAiB,SAE1B,WACmBC,OAAOtB,EAAKG,OAAOoB,OAApC,IACMC,EAAaF,OAAOtB,EAAKC,MAAMsB,OACnBD,OAAOtB,EAAKE,KAAKqB,OAEnCL,QAAQC,IAAId,EAAc,EAAGmB,G","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from \"notiflix\";\n\nconst form = document.querySelector('.form');\nconst elem = {\n  delay: form.querySelector('input[name=\"delay\"]'),\n  step: form.querySelector('input[name=\"step\"]'),\n  amount: form.querySelector('input[name=\"amount\"]'),\n  btn: form.querySelector('button')\n}\n\nelem.btn.addEventListener('click', handlerClick);\n\nfunction handlerClick() {\n  const inAmount = Number(elem.amount.value);\n  const inputDelay = Number(elem.delay.value);\n  const inputStep = Number(elem.step.value);\n  // generatePromises(inAmount, inputDelay, inputStep)\n  console.log(createPromise(0, inputDelay))\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve(`Promise ${position} resolved after ${delay} ms`);\n        Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      } else {\n        reject(`Promise ${position} rejected after ${delay} ms`);\n        Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n        console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n      }\n    }, delay);\n  });\n}\n\nfunction generatePromises(inAmount, inputDelay, inputStep) {\n  const promises = [];\n  for (let i = 0; i < inAmount; i++) {\n    const currentDelay = inputDelay + i * inputStep;\n    const position = i + 1;\n    const promise = new Promise(resolve => {\n      setTimeout(() => {\n        resolve(createPromise(position, currentDelay));\n      }, currentDelay);\n    });\n    promises.push(promise);\n  }\n}\n\n\n\n\n\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$elem","delay","step","amount","btn","$ce04d3a99e08e73b$var$createPromise","position","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","concat","$parcel$interopDefault","Notify","success","console","log","failure","addEventListener","Number","value","inputDelay"],"version":3,"file":"03-promises.04e70bda.js.map"}